// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	Register(ctx context.Context, in *ClientDetail, opts ...grpc.CallOption) (*ClientDetail, error)
	Notify(ctx context.Context, opts ...grpc.CallOption) (NotificationService_NotifyClient, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Register(ctx context.Context, in *ClientDetail, opts ...grpc.CallOption) (*ClientDetail, error) {
	out := new(ClientDetail)
	err := c.cc.Invoke(ctx, "/service.NotificationService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Notify(ctx context.Context, opts ...grpc.CallOption) (NotificationService_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/service.NotificationService/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceNotifyClient{stream}
	return x, nil
}

type NotificationService_NotifyClient interface {
	Send(*ClientDetail) error
	Recv() (*NotificationEvent, error)
	grpc.ClientStream
}

type notificationServiceNotifyClient struct {
	grpc.ClientStream
}

func (x *notificationServiceNotifyClient) Send(m *ClientDetail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notificationServiceNotifyClient) Recv() (*NotificationEvent, error) {
	m := new(NotificationEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	Register(context.Context, *ClientDetail) (*ClientDetail, error)
	Notify(NotificationService_NotifyServer) error
}

// UnimplementedNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) Register(context.Context, *ClientDetail) (*ClientDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNotificationServiceServer) Notify(NotificationService_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NotificationService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Register(ctx, req.(*ClientDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotificationServiceServer).Notify(&notificationServiceNotifyServer{stream})
}

type NotificationService_NotifyServer interface {
	Send(*NotificationEvent) error
	Recv() (*ClientDetail, error)
	grpc.ServerStream
}

type notificationServiceNotifyServer struct {
	grpc.ServerStream
}

func (x *notificationServiceNotifyServer) Send(m *NotificationEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notificationServiceNotifyServer) Recv() (*ClientDetail, error) {
	m := new(ClientDetail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NotificationService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _NotificationService_Notify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/notification_service.proto",
}
